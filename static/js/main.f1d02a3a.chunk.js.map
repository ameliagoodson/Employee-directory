{"version":3,"sources":["components/Navbar/index.js","components/List/List.js","components/Search/search.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","List","props","employees","map","item","key","id","name","phone","email","DOB","Searchbar","type","placeholder","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAkBeA,MAdf,WACE,OACE,6BACE,yBAAKC,UAAU,sBACb,kDACA,uBAAGA,UAAU,WAAb,6F,MCoCOC,MA1Cf,SAAcC,GACZ,OACE,yBAAKF,UAAU,oBACb,+BACE,4BACE,oCACA,qCACA,qCACA,oCAGF,4BACGE,EAAMC,UAAUC,KAAI,SAACC,GAAD,OACnB,wBAAIL,UAAU,kBAAkBM,IAAKD,EAAKE,IACvCF,EAAKG,UAIXN,EAAMC,UAAUC,KAAI,SAACC,GAAD,OACnB,wBAAIL,UAAU,kBAAkBM,IAAKD,EAAKE,IACvCF,EAAKI,UAGV,4BACGP,EAAMC,UAAUC,KAAI,SAACC,GAAD,OACnB,wBAAIL,UAAU,kBAAkBM,IAAKD,EAAKE,IACvCF,EAAKK,WAIZ,4BACGR,EAAMC,UAAUC,KAAI,SAACC,GAAD,OACnB,wBAAIL,UAAU,kBAAkBM,IAAKD,EAAKE,IACvCF,EAAKM,Y,MCfLC,MAlBf,WACE,OACE,yBAAKZ,UAAU,aACb,0BAAMA,UAAU,eACd,2BACEA,UAAU,eACVa,KAAK,SACLC,YAAY,SACZC,aAAW,WAEb,4BAAQf,UAAU,uCAAuCa,KAAK,UAA9D,aCRFV,EAAY,CAChB,CACEK,KAAM,iBACNC,MAAO,aACPC,MAAO,8BACPC,IAAK,UAEP,CACEH,KAAM,mBACNC,MAAO,aACPC,MAAO,yBACPC,IAAK,UAEP,CACEH,KAAM,kBACNC,MAAO,aACPC,MAAO,0BACPC,IAAK,UAEP,CACEH,KAAM,cACNC,MAAO,aACPC,MAAO,oBACPC,IAAK,UAEP,CACEH,KAAM,cACNC,MAAO,aACPC,MAAO,uBACPC,IAAK,UAcMK,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MADF,IAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMb,UAAWA,MC/BHc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f1d02a3a.chunk.js","sourcesContent":["import React from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./style.css\";\n\nfunction Navbar() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-dark\">\n        <h3>Employee Directory</h3>\n        <p className=\"navtext\">\n          Click on the columns to filter by heading or use the search box to\n          narrow your results\n        </p>\n      </nav>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction List(props) {\n  return (\n    <div className=\"card text-center\">\n      <table>\n        <tr>\n          <th>Name</th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>DOB</th>\n        </tr>\n\n        <td>\n          {props.employees.map((item) => (\n            <li className=\"list-group-item\" key={item.id}>\n              {item.name}\n            </li>\n          ))}\n        </td>\n        {props.employees.map((item) => (\n          <li className=\"list-group-item\" key={item.id}>\n            {item.phone}\n          </li>\n        ))}\n        <td>\n          {props.employees.map((item) => (\n            <li className=\"list-group-item\" key={item.id}>\n              {item.email}\n            </li>\n          ))}\n        </td>\n        <td>\n          {props.employees.map((item) => (\n            <li className=\"list-group-item\" key={item.id}>\n              {item.DOB}\n            </li>\n          ))}\n        </td>\n      </table>\n    </div>\n  );\n}\n\nexport default List;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Searchbar() {\r\n  return (\r\n    <div className=\"container\">\r\n      <form className=\"form-inline\">\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"search\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n        ></input>\r\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from \"react\";\nimport Navbar from \"./components/Navbar/index\";\nimport List from \"./components/List/List\";\nimport Searchbar from \"./components/Search/search\";\n\nconst employees = [\n  {\n    name: \"Amelia Goodson\",\n    phone: \"0478097895\",\n    email: \"ameliajanegoodson@gmail.com\",\n    DOB: 25021989,\n  },\n  {\n    name: \"Isabelle Goodson\",\n    phone: \"0473007895\",\n    email: \"bellegoodson@gmail.com\",\n    DOB: 25021993,\n  },\n  {\n    name: \"Lauren O'Reilly\",\n    phone: \"0448023895\",\n    email: \"laurenoreilly@gmail.com\",\n    DOB: 19051991,\n  },\n  {\n    name: \"Mark Dugger\",\n    phone: \"0445425745\",\n    email: \"mdugger@gmail.com\",\n    DOB: 12121961,\n  },\n  {\n    name: \"Judy Farrah\",\n    phone: \"0412154687\",\n    email: \"judyfarrah@gmail.com\",\n    DOB: 2909544,\n  },\n];\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />;\n      <Searchbar />\n      <List employees={employees} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}